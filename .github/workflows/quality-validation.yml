name: Quality Validation

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.quality-artifacts/**'

jobs:
  validate-quality-artifacts:
    runs-on: ubuntu-latest
    name: Validate Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Validate quality artifacts
      run: |
        echo "üîç Validating quality check artifacts..."
        ./bin/validate-quality-artifacts.sh
    
    - name: Upload validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quality-artifacts
        path: .quality-artifacts/
        retention-days: 7
    
    - name: Comment on PR
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          if (context.issue && context.issue.number) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
            body: `## ‚ùå Quality Check Validation Failed
            
            The quality check artifacts are either missing, outdated, or show failing tests.
            
            **Please run the following command locally before pushing:**
            \`\`\`bash
            ./bin/run-quality-checks.sh
            \`\`\`
            
            This will:
            1. Start the required Docker services (PostgreSQL, Elasticsearch, LocalStack)
            2. Run all unit and integration tests
            3. Perform linting and style checks
            4. Generate coverage reports
            5. Create artifacts in \`.quality-artifacts/\` that must be committed
            
            For more information, see [Quality Checks Guide](../blob/main/docs/development/quality-checks.md)`
            })
          }
    
    - name: Set PR status check
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          const description = status === 'success' 
            ? 'Quality checks passed locally' 
            : 'Quality checks need to be run locally';
          
          if (context.payload.pull_request && context.payload.pull_request.head) {
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.name,
              sha: context.payload.pull_request.head.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.name}/actions/runs/${context.runId}`,
              description: description,
              context: 'quality-checks/validation'
            })
          } else {
            console.log('Skipping status check - not a pull request event or PR data not available');
          }

  quick-unit-tests:
    runs-on: ubuntu-latest
    name: Quick Unit Tests (Optional)
    continue-on-error: true  # Don't block PR if this fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync --all-packages
    
    - name: Run quick unit tests
      run: |
        echo "üöÄ Running quick unit tests (no external services)..."
        uv run pytest packages/*/tests/ -v -m "not integration" --maxfail=3 || true
    
    - name: Add PR comment with test status
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ job.status }}' === 'success' ? '‚úÖ' : '‚ö†Ô∏è';
          const message = testResult === '‚úÖ' 
            ? 'Quick unit tests passed in CI' 
            : 'Quick unit tests had issues (non-blocking)';
          
          // Only comment if tests failed, to reduce noise
          if (testResult === '‚ö†Ô∏è' && context.issue && context.issue.number) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: `## ${testResult} CI Unit Tests (Optional)
              
              ${message}
              
              Note: This is an optional check. The required quality validation checks the locally-run test results.`
            })
          }
name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to release (e.g., structures, utils, xization, common, legacy)'
        required: true
        type: choice
        options:
          - structures
          - utils
          - xization
          - common
          - legacy
          - all
      test_pypi:
        description: 'Release to TestPyPI first'
        required: false
        type: boolean
        default: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
    
    - name: Build packages
      run: |
        if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event_name }}" = "release" ]; then
          # Build all packages
          for pkg in packages/*; do
            if [ -d "$pkg" ] && [ -f "$pkg/pyproject.toml" ]; then
              echo "Building $pkg"
              cd "$pkg"
              uv build
              cd ../..
            fi
          done
        else
          # Build specific package
          pkg="packages/${{ github.event.inputs.package }}"
          if [ -d "$pkg" ] && [ -f "$pkg/pyproject.toml" ]; then
            echo "Building $pkg"
            cd "$pkg"
            uv build
            cd ../..
          else
            echo "Package not found: $pkg"
            exit 1
          fi
        fi
    
    - name: Publish to TestPyPI
      if: github.event.inputs.test_pypi == 'true' || github.event_name == 'release'
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event_name }}" = "release" ]; then
          # Publish all packages
          for pkg in packages/*; do
            if [ -d "$pkg/dist" ]; then
              echo "Publishing $pkg to TestPyPI"
              cd "$pkg"
              uv publish --index https://test.pypi.org/legacy/
              cd ../..
            fi
          done
        else
          # Publish specific package
          pkg="packages/${{ github.event.inputs.package }}"
          if [ -d "$pkg/dist" ]; then
            echo "Publishing $pkg to TestPyPI"
            cd "$pkg"
            uv publish --index https://test.pypi.org/legacy/
            cd ../..
          fi
        fi
    
    - name: Publish to PyPI
      if: github.event_name == 'release' || (github.event.inputs.test_pypi == 'false' && github.event.inputs.package != '')
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ "${{ github.event.inputs.package }}" = "all" ] || [ "${{ github.event_name }}" = "release" ]; then
          # Publish all packages
          for pkg in packages/*; do
            if [ -d "$pkg/dist" ]; then
              echo "Publishing $pkg to PyPI"
              cd "$pkg"
              uv publish
              cd ../..
            fi
          done
        else
          # Publish specific package
          pkg="packages/${{ github.event.inputs.package }}"
          if [ -d "$pkg/dist" ]; then
            echo "Publishing $pkg to PyPI"
            cd "$pkg"
            uv publish
            cd ../..
          fi
        fi
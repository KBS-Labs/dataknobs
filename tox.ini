#
# TOX file for project builds.
#
# Main ideas:
#
#     * To be used in conjunction with uv package manager
#     * Defines project build mechanisms
#       * For CI/CD
#       * For development environments (ide, shell, notebook, etc.)
#     * Development (local or remote) can be done within
#       * virtual environments
#       * Docker
#         * Within which (for development only)
#           * /workdir holds the "live" project code
#           * /datadir is mapped to an external (to docker) development area
#         * for a project "dev" shell
#         * and/or for a project notebook ("nb") server
#
# Assumptions:
#
#    * All dependencies are managed using uv
#    * A ".project_vars" file exists and (optionally) defines:
#        * COVERAGE_FAIL_UNDER -- for pytest-cov threshold
#        * PROJECT -- the directory holding project code (if it doesn't follow
#                     the convention of matching the repository name with -/_
#                     substitutions)
#        * NOTEBOOK_PORT -- (if applicable) to specify the notebook port
#        * NOTE: "DATADIR" specifying the local data directory to be mapped to the
#                docker container's "/datadir", should *NOT* be in ".project_vars",
#                since it is a developer preference, not dictated by the project
#                itself.
#    * A "bin" directory holds:
#        * bin/start_dev.sh -- for initializing the dev shell environment
#        * bin/start_notebook.sh -- for initializing the notebook environment
#    * A "docker/Dockerfile.dev" exists -- for base project docker configuration
#    * A "_testing_output" directory exists
#        * For showing the latest testing and linting output to be considered
#          with pull requests.
#    * A ".pylintrc" file exists -- for establishing linting configurations
#    * ".gitignore" and ".dockerignore" files exist
#    * A project "README.md" file exists
#
# New project initializations:
#
#    % uv init <my-project> --package
#    % cd <my-project>
#    % # copy in/create
#        - tox.ini  # (this)
#        - .gitignore
#        - .dockerignore
#        - README.md
#        - .pylintrc
#        - bin/start_dev.sh, bin/start_notebook.sh
#        - docker/Dockerfile.dev
#        - _testing_output
#    % uv add pytest pytest-cov pylint --dev
#    --- For projects with notebooks --
#    % uv add jupyter ipywidgets matplotlib --dev
#    % uv add numpy pandas scikit-learn
#    % mkdir notebooks
#    --- For any additional project main, tests, and dev packages:
#    % uv add <project-package>
#    % uv add <test-package> --dev
#    % uv add <dev-package> --dev
#

[tox]
envlist = py39, tests, lint
isolated_build = true

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tox:.package]
# note tox will use the same python version as under what tox is installed to package
# so unless this is python 3 you can require a given python version for the packaging
# environment via the basepython key
basepython = python3

[testenv]
#skip_install = true
setenv =
    file|.project_vars
project_name = $(basename {toxinidir} | sed s/-/_/g)

[testenv:tests]
deps =
    pytest
allowlist_externals =
    uv
    bash
commands_pre =
    uv sync
commands =
    uv run bash -c \
        "pytest \
            --color=yes \
            --cov-config coverage.cfg \
            --cov={env:PROJECT:{[testenv]project_name}} \
            --cov-fail-under={env:COVERAGE_FAIL_UNDER:80} \
            --cov-report term-missing \
            --import-mode importlib tests \
        | tee >( \
              sed $'s/\033[[][^A-Za-z]*[A-Za-z]//g' \
              > _testing_output{/}pytest_output.txt \
          )"
    uv run python --version

[testenv:lint]
deps =
    pylint
allowlist_externals =
    uv
    bash
commands_pre =
    uv sync
commands =
    # NOTE: this assumes the package src is in a directory named like the repo
    #       with - substituted for _ (e.g., foo-bar/foo_bar) -- as is the case
    #       when the project directory structure has been created using uv
    uv run bash -c \
        "pylint \
            {env:PROJECT:{[testenv]project_name}} \
            --rcfile={toxinidir}{/}.pylintrc \
            -d C,R \
        | tee >( \
                sed $'s/\033[[][^A-Za-z]*[A-Za-z]//g' \
                > _testing_output{/}pylint_output.txt \
            )"

[testenv:dev]
allowlist_externals =
    docker
    bash
    bin/start_docker_process.sh
commands =
    bash -c \
        'bin/start_docker_process.sh \
            --entrypoint bin/start_dev.sh \
            --project_dir {toxinidir} \
            --dockerfile "docker/Dockerfile.dev" \
            --datadir {env:DATADIR:{env:HOME}{/}data} \
            -v /usr/share/nltk_data:/data/opt/nltk_resources'

[testenv:nb]
allowlist_externals =
    docker
    bash
    bin/start_docker_process.sh
commands =
    bash -c \
        'bin/start_docker_process.sh \
            --entrypoint bin/start_notebook.sh \
            --project_dir {toxinidir} \
            --dockerfile "docker/Dockerfile.dev" \
            --datadir {env:DATADIR:{env:HOME}{/}data} \
            -p {env:NOTEBOOK_PORT:8888}:{env:NOTEBOOK_PORT:8888} \
            -v /usr/share/nltk_data:/data/opt/nltk_resources'

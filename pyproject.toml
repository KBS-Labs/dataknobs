[project]
name = "dataknobs-workspace"
version = "1.0.0"
description = "Dataknobs monorepo workspace"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "dataknobs-common",
    "dataknobs-config",
    "dataknobs-data",
    "dataknobs-kv",
    "dataknobs-structures",
    "dataknobs-utils",
    "dataknobs-xization",
    "dataknobs",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.21.0",
    "pylint>=3.3.6",
    "black>=24.0.0",
    "isort>=5.13.0",
    "mypy>=1.0.0",
    "jupyter>=1.1.1",
    "ipywidgets>=8.1.5",
    "matplotlib>=3.10.1",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-monorepo-plugin>=1.0.5",
    "mkdocs-awesome-pages-plugin>=2.9.0",
    "mkdocs-git-revision-date-localized-plugin>=1.2.0",
]

[tool.uv.workspace]
members = ["packages/*"]

[tool.uv.sources]
dataknobs-common = { workspace = true }
dataknobs-config = { workspace = true }
dataknobs-data = { workspace = true }
dataknobs-kv = { workspace = true }
dataknobs-structures = { workspace = true }
dataknobs-utils = { workspace = true }
dataknobs-xization = { workspace = true }
dataknobs = { workspace = true }

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
namespace_packages = true
explicit_package_bases = true
mypy_path = "packages/common/src:packages/config/src:packages/data/src:packages/kv/src:packages/structures/src:packages/utils/src:packages/xization/src"
cache_dir = ".mypy_cache"
incremental = true
#plugins = ["numpy.typing.mypy_plugin"] -- DEPRECATED

# Per-module options
[[tool.mypy.overrides]]
module = [
    "nltk.*",
    "graphviz.*",
    "pyparsing.*",
    "json_stream.*",
    "sklearn.*",
    "python_nmap.*",
    "more_itertools.*",
    "flask.*",
    "asyncpg.*",
    "aioboto3.*",
    "pandas.*",
    "pandas.api.types.*",
    "faiss.*",
    "chromadb.*",
    "chromadb.config.*",
    "chromadb.utils.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "dataknobs_legacy.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# Gradual migration for complex vector store implementations
[[tool.mypy.overrides]]
module = [
    "dataknobs_data.vector.stores.faiss",
    "dataknobs_data.vector.stores.chroma",
    "dataknobs_data.validation.constraints",
    "dataknobs_data.validation.factory"
]
# Relax strictness for modules with complex type issues
warn_return_any = false
warn_unused_ignores = false
allow_untyped_defs = true

[tool.ruff]
# Ruff configuration for the entire workspace
target-version = "py310"
line-length = 100

# Include/exclude patterns
include = ["*.py", "*.pyi", "**/pyproject.toml"]
extend-include = ["*.ipynb"]
src = ["packages/*/src", "packages/*/tests"]

[tool.ruff.lint]
# Rule selection
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
    "PTH",  # flake8-use-pathlib
    "ERA",  # flake8-eradicate
    "PL",   # Pylint
    "NPY",  # NumPy-specific rules
    "PD",   # pandas-vet
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "PYI",  # flake8-pyi
]

ignore = [
    # Documentation - keep minimal
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "D200", # One-line docstring should fit on one line
    "D203", # 1 blank line required before class docstring (conflicts with D211)
    "D213", # Multi-line docstring summary should start at the second line (conflicts with D212)
    "D401", # First line should be in imperative mood
    "D415", # First line should end with period
    "D417", # Missing argument description in docstring
    
    # Whitespace and formatting - auto-fixable
    "W291", # Trailing whitespace
    "W293", # Blank line contains whitespace
    "E501", # Line too long (already configured at 100)
    
    # Type annotations - contextual
    "ANN001", # Missing type annotation for function argument
    "ANN003", # Missing type annotation for **kwargs
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "ANN204", # Missing return type annotation for special method __init__
    "ANN205", # Missing return type annotation for staticmethod
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    
    # Import location - often necessary for circular deps
    "PLC0415", # Import should be at the top-level of a file
    
    # Code simplification - sometimes less readable
    "SIM102", # Use a single if statement instead of nested if
    "SIM103", # Return negated condition directly - sometimes clearer with if/else
    "SIM118", # Use key in dict instead of key in dict.keys() - explicit is clearer
    "PLW3301", # Nested max calls - more readable when nested for complex cases
    "RUF006", # Store asyncio.create_task reference - only needed if canceling task
    "SIM105", # Use contextlib.suppress - not always clearer
    "SIM108", # Use ternary operator instead of if-else-block
    "SIM113", # Use enumerate for index variable
    "SIM115", # Use context manager for opening files - not practical for locks
    "SIM117", # Use single with statement with multiple contexts
    
    # Complexity metrics - already configured
    "PLR0911", # Too many return statements (configured at 6)
    "PLR0912", # Too many branches (configured at 12)
    "PLR0913", # Too many arguments to function call
    "PLR0915", # Too many statements (configured at 50)
    "PLR2004", # Magic value used in comparison
    "PLR5501", # Use elif instead of else-if - style preference
    "PLR1714", # Consider merging multiple comparisons - sometimes clearer separate
    
    # Unused arguments - often required by interfaces
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "ARG004", # Unused static method argument
    
    # Type checking upgrades
    "UP006", # Use `dict` instead of `Dict` for type annotations
    "UP007", # Use `X | Y` for union types
    "UP028", # Replace yield over for loop with yield from
    "UP035", # Deprecated typing imports
    "UP038", # Use X | Y in isinstance instead of (X, Y)
    
    # Import formatting
    "I001", # Import block is un-sorted or un-formatted - cosmetic
    
    # Path migration - gradual transition
    "PTH103", # Use Path.is_dir()
    "PTH105", # Use Path.replace()
    "PTH107", # Use Path.unlink()
    "PTH110", # Use Path.exists()
    "PTH120", # Use Path.parent
    "PTH123", # open() should be replaced by Path.open()
    "PTH202", # Use Path.stat().st_size
    
    # Other style preferences
    "C414", # Unnecessary list() call within sorted()
    "E721", # Use isinstance() instead of type comparison
    "PD901", # df is a bad variable name (common in data science)
    "RUF005", # Consider unpacking instead of concatenation
    "RUF012", # Mutable class attributes should use ClassVar
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF022", # __all__ is not sorted
    "N802", # Function name should be lowercase
]

# Allow these names that would normally be flagged by N
allowed-confusables = ["α", "β", "γ", "δ", "ε", "θ", "λ", "μ", "σ", "φ", "ω"]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore certain errors in specific files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401"]  # Module docstring and unused imports in __init__ files
"tests/*" = ["D100", "D101", "D102", "D103", "S101"]  # Docstrings not required in tests, assert allowed
"packages/legacy/*" = ["D", "N", "UP"]  # Relax rules for legacy code
"*.ipynb" = ["E402", "F811", "F401"]  # Allow imports not at top, redefinition, unused imports in notebooks

[tool.ruff.lint.isort]
# Configure import sorting
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["dataknobs", "dataknobs_common", "dataknobs_config", "dataknobs_data", "dataknobs_kv", "dataknobs_structures", "dataknobs_utils", "dataknobs_xization"]

[tool.ruff.lint.pydocstyle]
convention = "google"  # Use Google docstring convention

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Unix-style line endings
line-ending = "lf"

[tool.hatch.build.targets.wheel]
packages = ["src/dataknobs_workspace"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

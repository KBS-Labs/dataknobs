<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="17" failures="2" skipped="30" tests="425" time="80.298" timestamp="2025-08-14T19:16:15.117788+00:00" hostname="813db34d75cf"><testcase classname="packages.common.tests.test_version" name="test_version" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_class" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_configurable_base" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_callable_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_without_class_or_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_invalid_class_path" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_kwargs" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_cache_enabled" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_cache_disabled" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_clear_cache" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_clear_all_cache" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_empty_config" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_from_dict" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_by_index" time="0.001" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_by_name" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_names" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_set_config" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_config_not_found" time="0.000" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_yaml" time="0.003" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_json" time="0.001" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_multiple_sources" time="0.003" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_file_reference" time="0.001" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_nonexistent_file" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_global_defaults" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_type_specific_defaults" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_default_precedence" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_configs" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_precedence_first" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_precedence_last" time="0.000" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_dict" time="0.001" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_yaml_file" time="0.004" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_json_file" time="0.001" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_auto_name_single" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_auto_name_multiple" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_type_attribute" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_type_mismatch" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_reference_to_env_var" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_env_var_to_reference" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_nested_attribute_naming" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_custom_prefix" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_simple_override" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_multiple_overrides" time="0.001" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_type_conversion" time="0.001" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_boolean_conversion" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_disable_env_overrides" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_override_nonexistent_config" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_nested_attribute_override" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentIntegration" name="test_env_override_with_file_loading" time="0.002" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentIntegration" name="test_env_override_precedence" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_instance" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_factory_instance_cached" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_no_factory_defined" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_by_index" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_factory" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_class" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_without_class_or_factory" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_kwargs" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_multiple_factory_types" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_factory_cache_clearing" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_resolve_relative_paths" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_type_specific_path_attributes" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_global_root" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_type_specific_root" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_root_precedence" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_absolute_paths_unchanged" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_non_string_values_unchanged" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_no_global_root_raises_for_relative_paths" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_no_global_root_ok_for_absolute_paths" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_path_resolution_with_file_loading" time="0.001" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_named_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_index_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_no_selector" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_invalid_reference_format" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_by_name" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_by_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_no_selector" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_nonexistent" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceBuilder" name="test_build_named_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceBuilder" name="test_build_index_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_nested_reference_in_config" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_reference_in_list" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_circular_reference_detection" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceIntegration" name="test_cross_type_references" time="0.000" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_matches_multiple_attributes" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_with_type_specific" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_mixed_exact_and_regex_patterns" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_with_groups" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_invalid_regex_pattern_ignored" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_case_sensitive" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_with_special_characters" time="0.001" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_simple_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_substitution_with_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_substitution_with_dash_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_missing_variable_error" time="0.001" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_mixed_content" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_type_conversion" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_dict_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_list_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_nested_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_empty_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_has_variables" time="0.000" /><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_create_and_read" time="5.367"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0ab730&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c091e10&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...c6fc795790', 'amz-sdk-invocation-id': b'b6473c6c-54b4-4e1a-82c3-a861ea043238', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0ab730&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0ab730&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c091e10&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...c6fc795790', 'amz-sdk-invocation-id': b'b6473c6c-54b4-4e1a-82c3-a861ea043238', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_update" time="2.493"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c050670&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffffa1da5840&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...8c4977bb3d', 'amz-sdk-invocation-id': b'333af59e-91a9-42c1-ba97-d74a71a6a083', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c050670&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c050670&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffffa1da5840&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...8c4977bb3d', 'amz-sdk-invocation-id': b'333af59e-91a9-42c1-ba97-d74a71a6a083', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_delete" time="4.561"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb8e770&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4ba5f940&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...af855d4f54', 'amz-sdk-invocation-id': b'bf065835-b26a-4ab7-add5-998917e5089d', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb8e770&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb8e770&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4ba5f940&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...af855d4f54', 'amz-sdk-invocation-id': b'bf065835-b26a-4ab7-add5-998917e5089d', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_exists" time="2.489"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c5fedd0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c591060&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...bc32784f95', 'amz-sdk-invocation-id': b'69b9d69e-f107-4195-9912-7458c40bc510', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c5fedd0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c5fedd0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c591060&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...bc32784f95', 'amz-sdk-invocation-id': b'69b9d69e-f107-4195-9912-7458c40bc510', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_list_all" time="6.117"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c574100&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bc8b9a0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...b5fa76ffa4', 'amz-sdk-invocation-id': b'53937608-1b57-470f-90e3-71b8fb886994', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c574100&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c574100&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bc8b9a0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...b5fa76ffa4', 'amz-sdk-invocation-id': b'53937608-1b57-470f-90e3-71b8fb886994', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_filters" time="2.786"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b871a50&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cb45cf0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...30c45ddb5b', 'amz-sdk-invocation-id': b'87343c92-40e8-4d3f-96a9-b49846135ebf', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b871a50&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b871a50&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cb45cf0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...30c45ddb5b', 'amz-sdk-invocation-id': b'87343c92-40e8-4d3f-96a9-b49846135ebf', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_sorting" time="3.521"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0922f0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c0f6350&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...acbcb8402e', 'amz-sdk-invocation-id': b'b08a5d5f-8196-4e7a-b7ba-ad7fc8657697', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0922f0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c0922f0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c0f6350&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...acbcb8402e', 'amz-sdk-invocation-id': b'b08a5d5f-8196-4e7a-b7ba-ad7fc8657697', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_pagination" time="5.099"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb7dde0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c0f4400&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...c9aa8a87dd', 'amz-sdk-invocation-id': b'd68cb7eb-e13e-4944-bae7-245d2a9e3c69', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb7dde0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4bb7dde0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c0f4400&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...c9aa8a87dd', 'amz-sdk-invocation-id': b'd68cb7eb-e13e-4944-bae7-245d2a9e3c69', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_projection" time="4.937"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c487f70&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cae5180&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...232808a57f', 'amz-sdk-invocation-id': b'b4edf967-8a27-40d5-a333-1d2109b3c4b4', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c487f70&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c487f70&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cae5180&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...232808a57f', 'amz-sdk-invocation-id': b'b4edf967-8a27-40d5-a333-1d2109b3c4b4', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_create" time="1.603"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9add20&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b433310&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...4c33fc4542', 'amz-sdk-invocation-id': b'6338292b-a120-4317-8882-7986f8fab230', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9add20&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9add20&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b433310&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...4c33fc4542', 'amz-sdk-invocation-id': b'6338292b-a120-4317-8882-7986f8fab230', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_read" time="2.775"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b071870&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c8a8d90&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...8246c4fc5a', 'amz-sdk-invocation-id': b'79e8c31f-20b3-4b9f-84e4-6f9d4c5aded6', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b071870&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b071870&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c8a8d90&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...8246c4fc5a', 'amz-sdk-invocation-id': b'79e8c31f-20b3-4b9f-84e4-6f9d4c5aded6', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_delete" time="4.335"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c485cc0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b1ff8e0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...1cdd582fc5', 'amz-sdk-invocation-id': b'c4882330-b407-4307-8360-d36ba9bd08b1', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c485cc0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c485cc0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b1ff8e0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...1cdd582fc5', 'amz-sdk-invocation-id': b'c4882330-b407-4307-8360-d36ba9bd08b1', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_clear" time="4.518"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b02a740&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cae47f0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...e8c70c052f', 'amz-sdk-invocation-id': b'f3197be4-6379-42c4-9abc-237ef0c1f499', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b02a740&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b02a740&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4cae47f0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...e8c70c052f', 'amz-sdk-invocation-id': b'f3197be4-6379-42c4-9abc-237ef0c1f499', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_count" time="5.127"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b09f6d0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c5fc940&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...085d28faac', 'amz-sdk-invocation-id': b'db5fb989-07aa-489d-864a-078b28803138', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b09f6d0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b09f6d0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4c5fc940&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...085d28faac', 'amz-sdk-invocation-id': b'db5fb989-07aa-489d-864a-078b28803138', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_metadata_as_tags" time="2.574"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4ca92a70&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bb7c430&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...a85b8b613d', 'amz-sdk-invocation-id': b'4e49ff1d-75eb-4d45-83d2-1e578f1ce159', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4ca92a70&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4ca92a70&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bb7c430&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...a85b8b613d', 'amz-sdk-invocation-id': b'4e49ff1d-75eb-4d45-83d2-1e578f1ce159', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_large_record" time="1.748"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9aed10&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bb8ef50&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...5e064a983f', 'amz-sdk-invocation-id': b'df46821a-8de4-411d-b6d5-20ab86edd89c', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9aed10&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9aed10&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bb8ef50&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...5e064a983f', 'amz-sdk-invocation-id': b'df46821a-8de4-411d-b6d5-20ab86edd89c', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_concurrent_operations" time="4.947"><error message="failed on setup with &quot;botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-dataknobs-bucket&quot;&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c507370&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bf46080&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...916c2452a0', 'amz-sdk-invocation-id': b'6aab1438-51d4-42eb-b5d4-37ab1903108e', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c507370&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c507370&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

s3_config = {'bucket': 'test-dataknobs-bucket', 'max_workers': 5, 'prefix': 'test-records/', 'region': 'us-east-1'}

    @pytest.fixture
    def mock_s3_backend(s3_config):
        """Create a mock S3 backend using moto."""
        with mock_aws():
            # The S3Database will create the bucket if it doesn't exist
&gt;           db = S3Database(s3_config)

packages/data/tests/integration/test_s3_backend.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4bf46080&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-dataknobs-bucket, headers={'User...916c2452a0', 'amz-sdk-invocation-id': b'6aab1438-51d4-42eb-b5d4-37ab1903108e', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-dataknobs-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</error></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_from_config_method" time="3.419"><failure message="botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-bucket&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9ad6f0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4ba32fb0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-bucket, headers={'User-Agent': b...25320b18f0', 'amz-sdk-invocation-id': b'434f5111-6426-4ba9-98c5-61a3e1320dfb', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9ad6f0&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4b9ad6f0&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Configuration object at 0xffff4cf8f6d0&gt;

    def test_from_config_method(self):
        """Test creating S3Database from config."""
        with mock_aws():
            config = {
                "bucket": "test-bucket",
                "prefix": "data/",
                "region": "us-west-2"
            }
    
&gt;           db = S3Database.from_config(config)

packages/data/tests/integration/test_s3_backend.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:123: in from_config
    return cls(config)
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4ba32fb0&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-bucket, headers={'User-Agent': b...25320b18f0', 'amz-sdk-invocation-id': b'434f5111-6426-4ba9-98c5-61a3e1320dfb', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_missing_required_config" time="0.000" /><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_default_values" time="1.720"><failure message="botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: &quot;http://localstack:4566/test-bucket&quot;">self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c8afe20&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
&gt;           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

.venv/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/util/connection.py:60: in create_connection
    for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'localstack', port = 4566, family = &lt;AddressFamily.AF_UNSPEC: 0&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
&gt;       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -2] Name or service not known

/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/socket.py:967: gaierror

The above exception was the direct cause of the following exception:

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b02a410&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-bucket, headers={'User-Agent': b...efc6677669', 'amz-sdk-invocation-id': b'3891798c-bafa-4abf-8a4c-d03b08e789f6', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
&gt;           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

.venv/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
.venv/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
.venv/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
.venv/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
.venv/lib/python3.10/site-packages/urllib3/connection.py:494: in request
    self.endheaders()
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:1278: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
.venv/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/root/.local/share/uv/python/cpython-3.10.18-linux-aarch64-gnu/lib/python3.10/http/client.py:976: in send
    self.connect()
.venv/lib/python3.10/site-packages/urllib3/connection.py:325: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c8afe20&gt;

    def _new_conn(self) -&gt; socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
&gt;           raise NameResolutionError(self.host, self, e) from e
E           urllib3.exceptions.NameResolutionError: &lt;botocore.awsrequest.AWSHTTPConnection object at 0xffff4c8afe20&gt;: Failed to resolve 'localstack' ([Errno -2] Name or service not known)

.venv/lib/python3.10/site-packages/urllib3/connection.py:205: NameResolutionError

During handling of the above exception, another exception occurred:

self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Configuration object at 0xffff4cf8fa30&gt;

    def test_default_values(self):
        """Test default configuration values."""
        with mock_aws():
            config = {"bucket": "test-bucket"}
&gt;           db = S3Database(config)

packages/data/tests/integration/test_s3_backend.py:465: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/backends/s3.py:105: in __init__
    self._ensure_bucket_exists()
packages/data/src/dataknobs_data/backends/s3.py:128: in _ensure_bucket_exists
    self.s3_client.head_bucket(Bucket=self.bucket)
.venv/lib/python3.10/site-packages/botocore/client.py:595: in _api_call
    return self._make_api_call(operation_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/context.py:123: in wrapper
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/botocore/client.py:1040: in _make_api_call
    http, parsed_response = self._make_request(
.venv/lib/python3.10/site-packages/botocore/client.py:1064: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
.venv/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
.venv/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
.venv/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
.venv/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
.venv/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
.venv/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;botocore.httpsession.URLLib3Session object at 0xffff4b02a410&gt;
request = &lt;AWSPreparedRequest stream_output=False, method=HEAD, url=http://localstack:4566/test-bucket, headers={'User-Agent': b...efc6677669', 'amz-sdk-invocation-id': b'3891798c-bafa-4abf-8a4c-d03b08e789f6', 'amz-sdk-request': b'attempt=4; max=4'}&gt;

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
&gt;           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://localstack:4566/test-bucket"

.venv/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_custom_endpoint" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_create_database" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:67: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_crud_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:76: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_exists" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:113: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_upsert" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:124: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_filters" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:141: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_sorting" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:184: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_pagination" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:212: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_batch_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:238: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_count_and_clear" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:265: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_metadata_handling" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:294: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_special_characters" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:306: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_exists_filter" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:320: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_regex_filter" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:343: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_crud_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:365: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_search" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:392: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_context_manager" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:408: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_create_and_read" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_update" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_delete" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_exists" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_upsert" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_filters" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_sorting" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_pagination" time="0.004" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_batch_operations" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_csv_format" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_gzip_compression" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_persistence" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_concurrent_access" time="0.005" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_create_and_read" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_update" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_delete" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_search_with_filters" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_batch_operations" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_persistence" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_format_detection" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_create_database" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:61: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_crud_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:70: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_exists" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:107: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_upsert" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:118: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_filters" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:135: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_sorting" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:175: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_pagination" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:200: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_batch_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:223: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_count_and_clear" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:247: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_metadata_handling" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:270: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_special_characters" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:282: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_crud_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:301: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_search" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:328: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_context_manager" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:341: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_memory_backend_from_config" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_file_backend_from_config" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_config_build_memory" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_config_build_file_with_params" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_multiple_backend_configs" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.memory.SyncMemoryDatabase-config_params0]" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.memory.MemoryDatabase-config_params1]" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.file.SyncFileDatabase-config_params2]" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.file.FileDatabase-config_params3]" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_memory_backend" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_file_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_s3_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_backend_aliases" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_unknown_backend_error" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_get_backend_info" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_factory_registration" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_factory_with_environment_variables" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_multiple_backends_from_factory" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_missing_backend_parameter" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_backend_with_missing_dependencies" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_factory_singleton" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestFieldType" name="test_field_type_values" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_creation_with_type" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_creation_with_metadata" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_type_auto_detection" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_validation" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_conversion" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_to_dict" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_create_database" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_crud_operations" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_exists" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_upsert" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_filters" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_sorting" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_pagination" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_projection" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_batch_operations" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_count_and_clear" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_context_manager" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_thread_safety" time="0.003" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_crud_operations" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_search" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_batch_operations" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_context_manager" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_concurrent_operations" time="0.002" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_basic" time="0.002" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_transformation" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_filter" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_progress_callback" time="0.005" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_async_migration_basic" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_schema_version_creation" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_migration_add_field" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_migration_rename_field" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_schema_evolution_workflow" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_auto_detect_changes" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_field_mapping" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_field_transformation" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_exclude_fields" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_record_filter" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_transformation_pipeline" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_string" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_int" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_float" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_bool" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_normalize_string" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_truncate" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_map_values" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_chain" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_matches" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestSortSpec" name="test_sort_spec_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestSortSpec" name="test_sort_spec_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_fluent_interface" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_filter_operator_mapping" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_clear_methods" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_copy" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_uppercase_operators" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_mixed_case_operators" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_all_operator_mappings" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_method_aliases" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_method_chaining" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_property_access" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_empty_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_none_values" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_special_characters_in_patterns" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_large_in_list" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_complex_sorting" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQuerySerialization" name="test_complex_query_roundtrip" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQuerySerialization" name="test_partial_deserialization" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_like_pattern_matching" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_in_operator_with_different_types" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_comparison_with_nulls" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_user_search_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_pagination_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_dynamic_query_building" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_creation_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_creation_from_fields" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_with_metadata" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_get_and_set_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_remove_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_has_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_field_names_and_count" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_dict_like_access" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_iteration" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_validation" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_to_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_copy" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_project" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_merge" time="0.000" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_integration" time="0.001" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_with_environment_variables" time="0.001" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_with_defaults" time="0.001" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_from_config_directly" time="0.001" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_missing_required_config" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_basic_field_definition" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_with_default" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_type_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_with_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_custom_validator" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_creation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_strict_mode" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_serialization" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_required_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_unique_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_min_max_value_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_length_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_pattern_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_enum_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_custom_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_constraint_serialization" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_string_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_int_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_float_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_bool_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_list_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_dict_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_datetime_coercion" time="0.003" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_field_type_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_string_type_name_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchemaValidator" name="test_batch_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchemaValidator" name="test_validation_caching" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_package_deprecation_warning" time="0.002" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_utils_imports" time="0.001" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_structures_imports" time="0.001" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_xization_imports" time="0.001" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_package_version" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_backward_compatibility_json_utils" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_backward_compatibility_file_utils" time="0.001" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_basics" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_construction" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_update" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_setdefault" time="0.000" /><testcase classname="packages.structures.tests.test_document" name="test_simple_text" time="0.000" /><testcase classname="packages.structures.tests.test_record_store" name="test_basics" time="0.007" /><testcase classname="packages.structures.tests.test_record_store" name="test_no_backing_file" time="0.001" /><testcase classname="packages.structures.tests.test_tree" name="test_basics" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_find_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_collect_all_terminal_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_collect_some_terminal_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_path_and_ancestor" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_deepest_common_ancestor" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_prune" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_insert" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_get_deepest_left_and_right" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_edges" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_build_tree1" time="0.002" /><testcase classname="packages.structures.tests.test_tree" name="test_build_tree2" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_basic_noop" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_basic_withop" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_single_multifield" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_multifield" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_phrase_query_dict" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_batchfile_functions" time="0.001" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_elasticsearch_index" time="0.002" /><testcase classname="packages.utils.tests.test_file_utils" name="test_basics" time="0.001" /><testcase classname="packages.utils.tests.test_file_utils" name="test_is_gzip_file" time="0.002" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_complete_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_multiple_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_nested_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_unclosed_brace" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_unclosed_string" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_trailing_comma" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_no_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_multiple_malformed_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_severely_malformed_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_json_with_escaped_quotes" time="0.000" /><testcase classname="packages.utils.tests.test_json_utils" name="test_get_value" time="0.000" /><testcase classname="packages.utils.tests.test_json_utils" name="test_get_value2" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_count_uniques" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_count_limited_uniques" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_invert_values" time="0.002" /><testcase classname="packages.utils.tests.test_json_utils" name="test_squash_and_explode_data1" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_squash_and_explode_data2" time="0.001" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_get_value_by_key" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_message" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_message_build_instance" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_tree_construction" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_tree_serialization_roundtrip" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_get_duration_and_apply" time="0.000" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_dicts2df" time="0.004" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_sort_by_str_length" time="0.001" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_explode_empties" time="0.002" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_explode" time="0.001" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_mark_and_unmark" time="0.013" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_find_subsets" time="0.020" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_subgroups" time="0.010" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_get_current_ip" time="0.000" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_server_response_repr1" time="0.000" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_server_response_repr2" time="0.000" /><testcase classname="packages.utils.tests.test_resource_utils" name="test_get_nltk_wordnet" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_empty" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_stats_accumulator_basics1" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_stats_accumulator_basics2" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_combine" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_copy_constructor" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_initialize_from_dict1" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_floating_point" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_simple1" time="0.152" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_basics_with_processing" time="0.201" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_basics_with_access_only" time="0.191" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_manager_basics" time="0.211" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_key_manager" time="0.001" /><testcase classname="packages.utils.tests.test_xml_utils" name="test_xml_leaf_stream" time="0.001" /><testcase classname="packages.utils.tests.test_xml_utils" name="test_xml_element_grabber" time="0.001" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_no_groups" time="0.003" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_no_name_groups" time="0.003" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_named_groups" time="0.005" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_empty_tokenization" time="0.004" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_dual_tokenization" time="0.008" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_simple_tokenization" time="0.006" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_emoji_tokenization_with_camelcase" time="1.253" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_emoji_tokenization_without_camelcase" time="1.213" /><testcase classname="packages.xization.tests.test_normalize" name="test_expand_camelcase_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_non_embedded_symbols_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_embedded_symbols_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_get_hyphen_slash_expansions_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_parentheticals_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_expand_ampersand_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_get_all_string_variations" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_int_to_en" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_replace_smart_quotes_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_basic_normalization_fn" time="0.001" /></testsuite></testsuites>
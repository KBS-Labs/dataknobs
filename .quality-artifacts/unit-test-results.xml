<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="54" skipped="33" tests="650" time="9.095" timestamp="2025-08-15T04:14:22.696773-05:00" hostname="LJXQ2QJ0K0"><testcase classname="packages.common.tests.test_version" name="test_version" time="0.001" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_class" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_configurable_base" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_callable_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_without_class_or_factory" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_invalid_class_path" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectConstruction" name="test_build_with_kwargs" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_cache_enabled" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_cache_disabled" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_clear_cache" time="0.000" /><testcase classname="packages.config.tests.test_builders.TestObjectCaching" name="test_clear_all_cache" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_empty_config" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_from_dict" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_by_index" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_by_name" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_get_names" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_set_config" time="0.000" /><testcase classname="packages.config.tests.test_config.TestConfigBasics" name="test_config_not_found" time="0.000" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_yaml" time="0.003" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_json" time="0.001" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_load_multiple_sources" time="0.003" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_file_reference" time="0.001" /><testcase classname="packages.config.tests.test_config.TestFileLoading" name="test_nonexistent_file" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_global_defaults" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_type_specific_defaults" time="0.000" /><testcase classname="packages.config.tests.test_config.TestDefaults" name="test_default_precedence" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_configs" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_precedence_first" time="0.000" /><testcase classname="packages.config.tests.test_config.TestMerging" name="test_merge_precedence_last" time="0.000" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_dict" time="0.000" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_yaml_file" time="0.004" /><testcase classname="packages.config.tests.test_config.TestExport" name="test_to_json_file" time="0.001" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_auto_name_single" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_auto_name_multiple" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_type_attribute" time="0.000" /><testcase classname="packages.config.tests.test_config.TestAtomicConfig" name="test_type_mismatch" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_reference_to_env_var" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_env_var_to_reference" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_nested_attribute_naming" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentVariableNaming" name="test_custom_prefix" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_simple_override" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_multiple_overrides" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_type_conversion" time="0.001" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_boolean_conversion" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_disable_env_overrides" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_override_nonexistent_config" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentOverrides" name="test_nested_attribute_override" time="0.000" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentIntegration" name="test_env_override_with_file_loading" time="0.001" /><testcase classname="packages.config.tests.test_environment.TestEnvironmentIntegration" name="test_env_override_precedence" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_instance" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_factory_instance_cached" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_no_factory_defined" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_factory_by_index" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_factory" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_class" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_without_class_or_factory" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_get_instance_with_kwargs" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_multiple_factory_types" time="0.000" /><testcase classname="packages.config.tests.test_lazy_factory.TestLazyFactoryAccess" name="test_factory_cache_clearing" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_resolve_relative_paths" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_type_specific_path_attributes" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_global_root" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_type_specific_root" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_root_precedence" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_absolute_paths_unchanged" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_non_string_values_unchanged" time="0.001" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_no_global_root_raises_for_relative_paths" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_no_global_root_ok_for_absolute_paths" time="0.000" /><testcase classname="packages.config.tests.test_path_resolution.TestPathResolution" name="test_path_resolution_with_file_loading" time="0.002" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_named_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_index_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_parse_no_selector" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceParser" name="test_invalid_reference_format" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_by_name" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_by_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_negative_index" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_no_selector" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceResolution" name="test_resolve_nonexistent" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceBuilder" name="test_build_named_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestReferenceBuilder" name="test_build_index_reference" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_nested_reference_in_config" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_reference_in_list" time="0.000" /><testcase classname="packages.config.tests.test_references.TestNestedReferences" name="test_circular_reference_detection" time="0.001" /><testcase classname="packages.config.tests.test_references.TestReferenceIntegration" name="test_cross_type_references" time="0.000" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_matches_multiple_attributes" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_with_type_specific" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_mixed_exact_and_regex_patterns" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_pattern_with_groups" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_invalid_regex_pattern_ignored" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_case_sensitive" time="0.001" /><testcase classname="packages.config.tests.test_regex_path_resolution.TestRegexPathResolution" name="test_regex_with_special_characters" time="0.001" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_simple_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_substitution_with_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_substitution_with_dash_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_missing_variable_error" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_mixed_content" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_type_conversion" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_dict_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_list_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_nested_substitution" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_empty_default" time="0.000" /><testcase classname="packages.config.tests.test_substitution.TestVariableSubstitution" name="test_has_variables" time="0.000" /><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_create_and_read" time="0.232"><failure message="AttributeError: 'coroutine' object has no attribute 'get_value'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117a1bca0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x120028f10&gt;

&gt;   ???
E   AttributeError: 'coroutine' object has no attribute 'get_value'

/workdir/packages/data/tests/integration/test_s3_backend.py:91: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_update" time="0.076"><failure message="assert &lt;coroutine object S3Database.update at 0x122f84e40&gt; is True">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117a1be80&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x1032dcaf0&gt;

&gt;   ???
E   assert &lt;coroutine object S3Database.update at 0x122f84e40&gt; is True

/workdir/packages/data/tests/integration/test_s3_backend.py:109: AssertionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_delete" time="0.111"><failure message="assert &lt;coroutine object S3Database.delete at 0x123c80820&gt; is True">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117a1bfd0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x12127c8e0&gt;

&gt;   ???
E   assert &lt;coroutine object S3Database.delete at 0x123c80820&gt; is True

/workdir/packages/data/tests/integration/test_s3_backend.py:126: AssertionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_exists" time="0.064"><failure message="assert &lt;coroutine object S3Database.exists at 0x125bb9460&gt; is True&#10; +  where &lt;coroutine object S3Database.exists at 0x125bb9460&gt; = exists(&lt;coroutine object S3Database.create at 0x123c81d20&gt;)&#10; +    where exists = &lt;dataknobs_data.backends.s3.S3Database object at 0x120062710&gt;.exists">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c201c0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x120062710&gt;

&gt;   ???
E   assert &lt;coroutine object S3Database.exists at 0x125bb9460&gt; is True
E    +  where &lt;coroutine object S3Database.exists at 0x125bb9460&gt; = exists(&lt;coroutine object S3Database.create at 0x123c81d20&gt;)
E    +    where exists = &lt;dataknobs_data.backends.s3.S3Database object at 0x120062710&gt;.exists

/workdir/packages/data/tests/integration/test_s3_backend.py:145: AssertionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_list_all" time="0.119"><failure message="AttributeError: 'S3Database' object has no attribute 'list_all'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c203a0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x122ffc8e0&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'list_all'

/workdir/packages/data/tests/integration/test_s3_backend.py:164: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_filters" time="0.061"><failure message="TypeError: object of type 'coroutine' has no len()">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20580&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x123020b50&gt;

&gt;   ???
E   TypeError: object of type 'coroutine' has no len()

/workdir/packages/data/tests/integration/test_s3_backend.py:187: TypeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_sorting" time="0.061"><failure message="TypeError: 'coroutine' object is not iterable">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20760&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x126725bd0&gt;

&gt;   ???
E   TypeError: 'coroutine' object is not iterable

/workdir/packages/data/tests/integration/test_s3_backend.py:222: TypeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_pagination" time="0.132"><failure message="TypeError: object of type 'coroutine' has no len()">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20940&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x123cdbf10&gt;

&gt;   ???
E   TypeError: object of type 'coroutine' has no len()

/workdir/packages/data/tests/integration/test_s3_backend.py:241: TypeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_search_with_projection" time="0.060"><failure message="TypeError: object of type 'coroutine' has no len()">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20b20&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x122ffc9d0&gt;

&gt;   ???
E   TypeError: object of type 'coroutine' has no len()

/workdir/packages/data/tests/integration/test_s3_backend.py:269: TypeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_create" time="0.148"><failure message="AttributeError: 'S3Database' object has no attribute 'batch_create'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117a1baf0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x120062980&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'batch_create'

/workdir/packages/data/tests/integration/test_s3_backend.py:287: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_read" time="0.068"><failure message="AttributeError: 'S3Database' object has no attribute 'batch_read'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c204f0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x123cdb2b0&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'batch_read'

/workdir/packages/data/tests/integration/test_s3_backend.py:309: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_batch_delete" time="0.061"><failure message="AttributeError: 'S3Database' object has no attribute 'batch_delete'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20c40&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x1200aa9b0&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'batch_delete'

/workdir/packages/data/tests/integration/test_s3_backend.py:335: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_clear" time="0.063"><failure message="assert &lt;coroutine object Database.count at 0x14583f610&gt; == 10&#10; +  where &lt;coroutine object Database.count at 0x14583f610&gt; = count()&#10; +    where count = &lt;dataknobs_data.backends.s3.S3Database object at 0x126725db0&gt;.count">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c20e20&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x126725db0&gt;

&gt;   ???
E   assert &lt;coroutine object Database.count at 0x14583f610&gt; == 10
E    +  where &lt;coroutine object Database.count at 0x14583f610&gt; = count()
E    +    where count = &lt;dataknobs_data.backends.s3.S3Database object at 0x126725db0&gt;.count

/workdir/packages/data/tests/integration/test_s3_backend.py:356: AssertionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_count" time="0.195"><failure message="assert &lt;coroutine object Database.count at 0x146c65e00&gt; == 0&#10; +  where &lt;coroutine object Database.count at 0x146c65e00&gt; = count()&#10; +    where count = &lt;dataknobs_data.backends.s3.S3Database object at 0x1200d0d30&gt;.count">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c21000&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x1200d0d30&gt;

&gt;   ???
E   assert &lt;coroutine object Database.count at 0x146c65e00&gt; == 0
E    +  where &lt;coroutine object Database.count at 0x146c65e00&gt; = count()
E    +    where count = &lt;dataknobs_data.backends.s3.S3Database object at 0x1200d0d30&gt;.count

/workdir/packages/data/tests/integration/test_s3_backend.py:370: AssertionError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_metadata_as_tags" time="0.061"><failure message="AttributeError: 'coroutine' object has no attribute 'metadata'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c211e0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x1200e2fe0&gt;

&gt;   ???
E   AttributeError: 'coroutine' object has no attribute 'metadata'

/workdir/packages/data/tests/integration/test_s3_backend.py:398: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_large_record" time="0.061"><failure message="AttributeError: 'coroutine' object has no attribute 'get_value'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c213c0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x1402688e0&gt;

&gt;   ???
E   AttributeError: 'coroutine' object has no attribute 'get_value'

/workdir/packages/data/tests/integration/test_s3_backend.py:412: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Backend" name="test_concurrent_operations" time="0.061"><failure message="AttributeError: 'S3Database' object has no attribute 'batch_create'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Backend object at 0x117c215a0&gt;
mock_s3_backend = &lt;dataknobs_data.backends.s3.S3Database object at 0x126727a30&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'batch_create'

/workdir/packages/data/tests/integration/test_s3_backend.py:424: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_from_config_method" time="0.212"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Configuration object at 0x117c218a0&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'bucket'

/workdir/packages/data/tests/integration/test_s3_backend.py:452: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_missing_required_config" time="0.000" /><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_default_values" time="0.060"><failure message="AttributeError: 'S3Database' object has no attribute 'prefix'">self = &lt;packages.data.tests.integration.test_s3_backend.TestS3Configuration object at 0x117c21c00&gt;

&gt;   ???
E   AttributeError: 'S3Database' object has no attribute 'prefix'

/workdir/packages/data/tests/integration/test_s3_backend.py:467: AttributeError</failure></testcase><testcase classname="packages.data.tests.integration.test_s3_backend.TestS3Configuration" name="test_custom_endpoint" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_all_backends_have_both_versions" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_async_backends_have_streaming_methods" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_sync_backends_have_streaming_methods" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_backend_naming_convention" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_backend_inheritance" time="0.000" /><testcase classname="packages.data.tests.test_backend_streaming_consistency.TestBackendConsistency" name="test_streaming_method_signatures" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_create_database" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:67: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_crud_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:76: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_exists" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:113: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_upsert" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:124: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_filters" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:141: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_sorting" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:184: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_search_with_pagination" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:212: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_batch_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:238: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_count_and_clear" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:265: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_metadata_handling" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:294: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_special_characters" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:306: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_exists_filter" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:320: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestSyncElasticsearchDatabase" name="test_regex_filter" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:343: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_crud_operations" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:365: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_search" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:392: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_elasticsearch.TestAsyncElasticsearchDatabase" name="test_async_context_manager" time="0.000"><skipped type="pytest.skip" message="Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance">/workdir/packages/data/tests/test_backends/test_elasticsearch.py:408: Elasticsearch tests require TEST_ELASTICSEARCH=true and a running Elasticsearch instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_create_and_read" time="0.003" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_update" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_delete" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_exists" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_upsert" time="0.003" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_filters" time="0.003" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_sorting" time="0.003" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_search_with_pagination" time="0.007" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_batch_operations" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_csv_format" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_gzip_compression" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_persistence" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestFileDatabase" name="test_concurrent_access" time="0.008" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_create_and_read" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_update" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_delete" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_search_with_filters" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_batch_operations" time="0.002" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_persistence" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file.TestSyncFileDatabase" name="test_format_detection" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileLock" name="test_lock_acquire_release" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileLock" name="test_lock_context_manager" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileLock" name="test_windows_lock_retry" time="0.000"><skipped type="pytest.skip" message="Windows-specific test">/Users/spencer.koehler/dev/kbs-labs/dataknobs/packages/data/tests/test_backends/test_file_edge_cases.py:67: Windows-specific test</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileLock" name="test_lock_release_error_handling" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_base_format_not_implemented" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_json_format_empty_file" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_json_format_nonexistent_file" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_json_format_corrupted_file" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'json.decoder.JSONDecodeError'&gt;">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats object at 0x117c797e0&gt;

    def test_json_format_corrupted_file(self):
        """Test JSON format with corrupted file."""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            filepath = f.name
            f.write("{invalid json")
    
        try:
&gt;           with pytest.raises(json.JSONDecodeError):
E           Failed: DID NOT RAISE &lt;class 'json.decoder.JSONDecodeError'&gt;

packages/data/tests/test_backends/test_file_edge_cases.py:155: Failed</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_json_format_save_with_indent" time="0.001" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_csv_format_empty_file" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_csv_format_with_complex_data" time="0.001"><failure message="AssertionError: assert 'id1' in {}">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats object at 0x117c79cf0&gt;

    def test_csv_format_with_complex_data(self):
        """Test CSV format with nested data structures."""
        with tempfile.NamedTemporaryFile(suffix='.csv', delete=False) as f:
            filepath = f.name
    
        try:
            # Save data with nested structures
            data = {
                "id1": {"name": "test", "nested": {"key": "value"}, "list": [1, 2, 3]},
                "id2": {"name": "test2", "nested": {"key": "value2"}}
            }
            CSVFormat.save(filepath, data)
    
            # Load and verify
            loaded = CSVFormat.load(filepath)
&gt;           assert "id1" in loaded
E           AssertionError: assert 'id1' in {}

packages/data/tests/test_backends/test_file_edge_cases.py:207: AssertionError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_parquet_format_basic" time="0.000"><skipped type="pytest.skip" message="could not import 'pyarrow': No module named 'pyarrow'">/Users/spencer.koehler/dev/kbs-labs/dataknobs/packages/data/tests/test_backends/test_file_edge_cases.py:218: could not import 'pyarrow': No module named 'pyarrow'</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileFormats" name="test_parquet_format_empty_file" time="0.000" /><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_unsupported_format" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c79600&gt;

    @pytest.mark.asyncio
    async def test_unsupported_format(self):
        """Test error handling for unsupported file format."""
        with tempfile.NamedTemporaryFile(suffix=".unknown", delete=False) as f:
            filepath = f.name
    
        try:
            with pytest.raises(ValueError, match="Unsupported file format"):
&gt;               db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x1200c2260&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpxr4hkoa8.unknown'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_gzip_json_format" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c78d00&gt;

    @pytest.mark.asyncio
    async def test_gzip_json_format(self):
        """Test gzipped JSON format operations."""
        with tempfile.NamedTemporaryFile(suffix=".json.gz", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x1211e9bd0&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpwtv0nuq2.json.gz'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_bz2_json_format" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c7a0b0&gt;

    @pytest.mark.asyncio
    async def test_bz2_json_format(self):
        """Test bz2 compressed JSON format."""
        with tempfile.NamedTemporaryFile(suffix=".json.bz2", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x1200c1cc0&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmptc1yk6wa.json.bz2'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_xz_json_format" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c7a2f0&gt;

    @pytest.mark.asyncio
    async def test_xz_json_format(self):
        """Test xz/lzma compressed JSON format."""
        with tempfile.NamedTemporaryFile(suffix=".json.xz", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:330: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x1200c1e40&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpgz9t72zh.json.xz'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_from_config_with_compression" time="0.001"><failure message="AttributeError: 'FileDatabase' object has no attribute '_filepath'. Did you mean: 'filepath'?">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c7a530&gt;

    @pytest.mark.asyncio
    async def test_from_config_with_compression(self):
        """Test creating database from config with compression."""
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as f:
            filepath = f.name
    
        try:
            config = {
                "path": filepath,
                "format": "json",
                "compression": "gzip"
            }
    
            db = FileDatabase.from_config(config)
&gt;           assert db._filepath == filepath
E           AttributeError: 'FileDatabase' object has no attribute '_filepath'. Did you mean: 'filepath'?

packages/data/tests/test_backends/test_file_edge_cases.py:359: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_record_without_id_field" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c7a770&gt;

    @pytest.mark.asyncio
    async def test_record_without_id_field(self):
        """Test handling records without explicit ID field."""
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x123021630&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpdpo3njah.json'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases" name="test_concurrent_writes" time="0.001"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestFileDatabaseEdgeCases object at 0x117c7a9b0&gt;

    @pytest.mark.asyncio
    async def test_concurrent_writes(self):
        """Test concurrent write operations with file locking."""
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = FileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.FileDatabase object at 0x1200d3100&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpvtdd5drf.json'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:298: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases" name="test_thread_safety" time="0.000"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases object at 0x117c7ac80&gt;

    def test_thread_safety(self):
        """Test thread-safe operations."""
        import threading
    
        with tempfile.NamedTemporaryFile(suffix=".json", delete=False) as f:
            filepath = f.name
    
        try:
&gt;           db = SyncFileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:441: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.SyncFileDatabase object at 0x14ab85ae0&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmpkdvg8tpo.json'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:598: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases" name="test_invalid_path_permissions" time="0.000"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases object at 0x117c7ae30&gt;

    def test_invalid_path_permissions(self):
        """Test handling of invalid path or permission errors."""
        # Try to create database in non-writable location
        invalid_path = "/root/test_db.json"  # Typically not writable
    
        if not os.access("/root", os.W_OK):
            with pytest.raises((PermissionError, OSError)):
&gt;               db = SyncFileDatabase(invalid_path)

packages/data/tests/test_backends/test_file_edge_cases.py:481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.SyncFileDatabase object at 0x14781c400&gt;
config = '/root/test_db.json'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:598: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases" name="test_format_detection_from_extension" time="0.000"><failure message="AttributeError: 'str' object has no attribute 'get'">self = &lt;packages.data.tests.test_backends.test_file_edge_cases.TestSyncFileDatabaseEdgeCases object at 0x117c7afe0&gt;

    def test_format_detection_from_extension(self):
        """Test automatic format detection from file extension."""
        test_cases = [
            (".json", "json"),
            (".csv", "csv"),
            (".parquet", "parquet"),
            (".json.gz", "json"),
            (".csv.bz2", "csv"),
            (".JSON", "json"),  # Case insensitive
            (".CSV", "csv"),
        ]
    
        for ext, expected_format in test_cases:
            with tempfile.NamedTemporaryFile(suffix=ext, delete=False) as f:
                filepath = f.name
    
            try:
&gt;               db = SyncFileDatabase(filepath)

packages/data/tests/test_backends/test_file_edge_cases.py:501: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.backends.file.SyncFileDatabase object at 0x1200c1360&gt;
config = '/var/folders/bj/ktzlvhvn1pg4bhrlbx0qfq4r0000gp/T/tmp3qhfdcw7.json'

    def __init__(self, config: dict[str, Any] | None = None):
        super().__init__(config)
&gt;       self.filepath = self.config.get("path", "data.json")
E       AttributeError: 'str' object has no attribute 'get'

packages/data/src/dataknobs_data/backends/file.py:598: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_create_database" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:61: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_crud_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:70: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_exists" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:107: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_upsert" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:118: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_filters" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:135: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_sorting" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:175: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_search_with_pagination" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:200: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_batch_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:223: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_count_and_clear" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:247: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_metadata_handling" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:270: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestSyncPostgresDatabase" name="test_special_characters" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:282: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_crud_operations" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:301: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_search" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:328: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_backends.test_postgres.TestAsyncPostgresDatabase" name="test_async_context_manager" time="0.000"><skipped type="pytest.skip" message="PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance">/workdir/packages/data/tests/test_backends/test_postgres.py:341: PostgreSQL tests require TEST_POSTGRES=true and a running PostgreSQL instance</skipped></testcase><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_memory_backend_from_config" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_file_backend_from_config" time="0.003" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_config_build_memory" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_config_build_file_with_params" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_multiple_backend_configs" time="0.001" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.memory.SyncMemoryDatabase-config_params0]" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.memory.MemoryDatabase-config_params1]" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.file.SyncFileDatabase-config_params2]" time="0.000" /><testcase classname="packages.data.tests.test_config_integration.TestConfigIntegration" name="test_all_backends_configurable[dataknobs_data.backends.file.FileDatabase-config_params3]" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDataknobsDataError" name="test_base_exception" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDataknobsDataError" name="test_inheritance" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestRecordNotFoundError" name="test_record_not_found_with_id" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestRecordNotFoundError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestRecordValidationError" name="test_validation_error_without_field" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestRecordValidationError" name="test_validation_error_with_field" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestRecordValidationError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestFieldTypeError" name="test_field_type_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestFieldTypeError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseError" name="test_database_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseConnectionError" name="test_connection_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseConnectionError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseOperationError" name="test_operation_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDatabaseOperationError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestQueryError" name="test_query_error_without_query_object" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestQueryError" name="test_query_error_with_query_object" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestQueryError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestSerializationError" name="test_serialization_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestSerializationError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDataFormatError" name="test_data_format_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestDataFormatError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestBackendNotFoundError" name="test_backend_not_found_without_available" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestBackendNotFoundError" name="test_backend_not_found_with_available" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestBackendNotFoundError" name="test_backend_not_found_with_empty_available" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestBackendNotFoundError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestConfigurationError" name="test_configuration_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestConfigurationError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestConcurrencyError" name="test_concurrency_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestConcurrencyError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestTransactionError" name="test_transaction_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestTransactionError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestMigrationError" name="test_migration_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestMigrationError" name="test_is_dataknobs_error" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestExceptionHierarchy" name="test_all_exceptions_inherit_from_base" time="0.000" /><testcase classname="packages.data.tests.test_exceptions.TestExceptionHierarchy" name="test_exception_catching_hierarchy" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_memory_backend" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_file_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_create_s3_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_backend_aliases" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_unknown_backend_error" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestDatabaseFactory" name="test_get_backend_info" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_factory_registration" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_factory_with_environment_variables" time="0.001"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.test_factory.TestFactoryWithConfig object at 0x117ccf580&gt;
mock_boto_client = &lt;MagicMock name='client' id='4693922368'&gt;
monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x117c79a80&gt;

    @patch('boto3.client')
    def test_factory_with_environment_variables(self, mock_boto_client, monkeypatch):
        """Test factory with environment variable substitution."""
        # Mock S3 client
        mock_s3 = MagicMock()
        mock_boto_client.return_value = mock_s3
        mock_s3.head_bucket.return_value = {}
    
        # Set environment variables
        monkeypatch.setenv("DB_BACKEND", "s3")
        monkeypatch.setenv("S3_BUCKET", "env-bucket")
        monkeypatch.setenv("S3_PREFIX", "env-prefix/")
    
        config = Config()
        config.register_factory("database", database_factory)
    
        config.load({
            "databases": [{
                "name": "env_db",
                "factory": "database",
                "backend": "${DB_BACKEND}",
                "bucket": "${S3_BUCKET}",
                "prefix": "${S3_PREFIX}"
            }]
        })
    
        db = config.get_instance("databases", "env_db")
        assert isinstance(db, S3Database)
&gt;       assert db.bucket == "env-bucket"
E       AttributeError: 'S3Database' object has no attribute 'bucket'

packages/data/tests/test_factory.py:150: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_factory.TestFactoryWithConfig" name="test_multiple_backends_from_factory" time="0.001" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_missing_backend_parameter" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_backend_with_missing_dependencies" time="0.000" /><testcase classname="packages.data.tests.test_factory.TestFactoryEdgeCases" name="test_factory_singleton" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryPostgres" name="test_create_postgres_backend_success" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryPostgres" name="test_postgres_aliases" time="0.002" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryPostgres" name="test_postgres_import_error" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryElasticsearch" name="test_create_elasticsearch_backend_success" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryElasticsearch" name="test_elasticsearch_aliases" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryElasticsearch" name="test_elasticsearch_import_error" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestDatabaseFactoryS3ImportError" name="test_s3_import_error" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestBackendInfo" name="test_get_all_backend_info" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestBackendInfo" name="test_get_info_case_insensitive" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestBackendInfo" name="test_get_info_unknown_backend" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_create_async_memory_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_create_async_file_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_create_async_postgres_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_create_async_elasticsearch_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_memory_aliases" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_postgres_aliases" time="0.002" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_elasticsearch_aliases" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_unsupported_backend" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_unknown_backend" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestAsyncDatabaseFactory" name="test_async_default_backend" time="0.001" /><testcase classname="packages.data.tests.test_factory_extended.TestFactorySingletons" name="test_database_factory_singleton" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestFactorySingletons" name="test_async_database_factory_singleton" time="0.000" /><testcase classname="packages.data.tests.test_factory_extended.TestFactorySingletons" name="test_both_factories_are_different" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestFieldType" name="test_field_type_values" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_creation_with_type" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_creation_with_metadata" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_type_auto_detection" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_validation" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_conversion" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_to_dict" time="0.000" /><testcase classname="packages.data.tests.test_fields.TestField" name="test_field_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_create_database" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_crud_operations" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_exists" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_upsert" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_filters" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_sorting" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_pagination" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_search_with_projection" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_batch_operations" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_count_and_clear" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_context_manager" time="0.000" /><testcase classname="packages.data.tests.test_memory_backend.TestSyncMemoryDatabase" name="test_thread_safety" time="0.002" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_crud_operations" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_search" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_batch_operations" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_async_context_manager" time="0.001" /><testcase classname="packages.data.tests.test_memory_backend.TestAsyncMemoryDatabase" name="test_concurrent_operations" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_basic" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_transformation" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_filter" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_sync_migration_with_progress_callback" time="0.005" /><testcase classname="packages.data.tests.test_migration.TestDataMigrator" name="test_async_migration_basic" time="0.001" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_schema_version_creation" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_migration_add_field" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_migration_rename_field" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_schema_evolution_workflow" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestSchemaEvolution" name="test_auto_detect_changes" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_field_mapping" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_field_transformation" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_exclude_fields" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_record_filter" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestDataTransformer" name="test_transformation_pipeline" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_string" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_int" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_float" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_to_bool" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_normalize_string" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_truncate" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_map_values" time="0.000" /><testcase classname="packages.data.tests.test_migration.TestValueTransformer" name="test_chain" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_progress_percentage_zero_total" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_progress_percentage_calculation" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_duration_not_finished" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_duration_calculation" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_records_per_second_no_duration" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_records_per_second_zero_duration" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_records_per_second_calculation" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationProgress" name="test_error_tracking" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_batch_size_configuration" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_migration_with_errors" time="0.001" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_migration_with_progress_callback" time="0.001" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_migration_empty_source" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_async_migration_basic" time="0.001" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_async_migration_with_transformation" time="0.001" /><testcase classname="packages.data.tests.test_migration_extended.TestDataMigratorEdgeCases" name="test_migration_with_logging" time="0.001" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_schema_version_comparison" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_add_migration" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_get_migration_path" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_get_migration_path_no_path" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_apply_migration_add_field" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_apply_migration_remove_field" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_apply_migration_rename_field" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_apply_migration_change_type" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestSchemaEvolutionEdgeCases" name="test_apply_migration_custom" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_field_mapping_basic" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_field_mapping_with_transformer" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_value_transformer" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_add_default_field" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_remove_field" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_transformation_pipeline" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestDataTransformerEdgeCases" name="test_transformation_error_handling" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationTypes" name="test_migration_type_enum_values" time="0.000" /><testcase classname="packages.data.tests.test_migration_extended.TestMigrationTypes" name="test_migration_with_custom_type" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchConfig" name="test_default_config" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchConfig" name="test_custom_config" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_init" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_iter_chunks" time="0.004" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_process_dataframe_without_combine" time="0.002" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_process_dataframe_with_combine" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_read_csv_chunked" time="0.004" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestChunkedProcessor" name="test_empty_dataframe" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_init_with_sync_database" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_init_with_default_converter" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_init_with_async_database" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_dataframe_simple" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_with_chunking" time="0.011" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_with_error_handling_skip" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_with_error_handling_log" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_with_error_handling_raise" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_bulk_insert_with_progress_callback" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_query_as_dataframe" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_query_as_dataframe_async" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_aggregate_with_groupby" time="0.004" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_aggregate_without_groupby" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_aggregate_with_custom_function" time="0.001" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_aggregate_empty_result" time="0.000" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_export_to_csv" time="0.002" /><testcase classname="packages.data.tests.test_pandas_batch_ops.TestBatchOperations" name="test_export_to_parquet" time="0.000"><skipped type="pytest.skip" message="could not import 'pyarrow': No module named 'pyarrow'">/Users/spencer.koehler/dev/kbs-labs/dataknobs/packages/data/tests/test_pandas_batch_ops.py:416: could not import 'pyarrow': No module named 'pyarrow'</skipped></testcase><testcase classname="packages.data.tests.test_pandas_integration.TestTypeMapper" name="test_field_type_to_pandas" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestTypeMapper" name="test_pandas_to_field_type" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestTypeMapper" name="test_value_conversion_to_pandas" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestTypeMapper" name="test_value_conversion_from_pandas" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestTypeMapper" name="test_infer_field_type" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_records_to_dataframe_basic" time="0.003" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_records_to_dataframe_with_index" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_records_to_dataframe_with_metadata" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_dataframe_to_records_basic" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_round_trip_conversion" time="0.002" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_empty_records" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_missing_values" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestDataFrameConverter" name="test_type_preservation" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestBatchOperations" name="test_bulk_insert_dataframe" time="0.006" /><testcase classname="packages.data.tests.test_pandas_integration.TestBatchOperations" name="test_query_as_dataframe" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestBatchOperations" name="test_aggregation" time="0.004" /><testcase classname="packages.data.tests.test_pandas_integration.TestBatchOperations" name="test_chunked_processing" time="0.001" /><testcase classname="packages.data.tests.test_pandas_integration.TestBatchOperations" name="test_export_to_csv" time="0.003" /><testcase classname="packages.data.tests.test_pandas_integration.TestMetadataHandling" name="test_metadata_in_attrs" time="0.000" /><testcase classname="packages.data.tests.test_pandas_integration.TestMetadataHandling" name="test_metadata_round_trip" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_matches" time="0.000" /><testcase classname="packages.data.tests.test_query.TestFilter" name="test_filter_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestSortSpec" name="test_sort_spec_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestSortSpec" name="test_sort_spec_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_creation" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_fluent_interface" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_filter_operator_mapping" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_clear_methods" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_to_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_query.TestQuery" name="test_query_copy" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_uppercase_operators" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_mixed_case_operators" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryOperatorMapping" name="test_all_operator_mappings" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_method_aliases" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_method_chaining" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryFluentInterface" name="test_property_access" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_empty_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_none_values" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_special_characters_in_patterns" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_large_in_list" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryEdgeCases" name="test_complex_sorting" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQuerySerialization" name="test_complex_query_roundtrip" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQuerySerialization" name="test_partial_deserialization" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_like_pattern_matching" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_in_operator_with_different_types" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestFilterMatching" name="test_comparison_with_nulls" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_user_search_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_pagination_query" time="0.000" /><testcase classname="packages.data.tests.test_query_enhanced.TestQueryIntegration" name="test_dynamic_query_building" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_creation_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_creation_from_fields" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_record_with_metadata" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_get_and_set_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_remove_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_has_field" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_field_names_and_count" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_dict_like_access" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_iteration" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_validation" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_to_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_from_dict" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_copy" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_project" time="0.000" /><testcase classname="packages.data.tests.test_records.TestRecord" name="test_merge" time="0.000" /><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_integration" time="0.001"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration object at 0x117e02410&gt;
mock_boto_client = &lt;MagicMock name='client' id='5567503552'&gt;

    @patch('boto3.client')
    def test_s3_config_integration(self, mock_boto_client):
        """Test that S3Database can be instantiated via Config."""
        # Mock S3 client
        mock_s3 = MagicMock()
        mock_boto_client.return_value = mock_s3
        mock_s3.head_bucket.return_value = {}  # Bucket exists
    
        # Create configuration
        config = Config()
        config.load({
            "databases": [{
                "name": "s3_storage",
                "class": "dataknobs_data.backends.s3.S3Database",
                "bucket": "my-test-bucket",
                "prefix": "records/prod/",
                "region": "us-west-2",
                "max_workers": 20
            }]
        })
    
        # Get instance through Config
        db = config.get_instance("databases", "s3_storage")
    
        # Verify it's an S3Database instance
        assert isinstance(db, S3Database)
&gt;       assert db.bucket == "my-test-bucket"
E       AttributeError: 'S3Database' object has no attribute 'bucket'

packages/data/tests/test_s3_config_integration.py:38: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_with_environment_variables" time="0.001"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration object at 0x117e01f00&gt;
mock_boto_client = &lt;MagicMock name='client' id='5567415824'&gt;
monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x14bd80190&gt;

    @patch('boto3.client')
    def test_s3_config_with_environment_variables(self, mock_boto_client, monkeypatch):
        """Test S3 configuration with environment variable substitution."""
        # Mock S3 client
        mock_s3 = MagicMock()
        mock_boto_client.return_value = mock_s3
        mock_s3.head_bucket.return_value = {}  # Bucket exists
    
        # Set environment variables
        monkeypatch.setenv("S3_BUCKET", "env-bucket")
        monkeypatch.setenv("S3_PREFIX", "env-prefix/")
        monkeypatch.setenv("AWS_REGION", "eu-west-1")
        monkeypatch.setenv("LOCALSTACK_ENDPOINT", "http://localhost:4566")
    
        # Create configuration with environment variables
        config = Config()
        config.load({
            "databases": [{
                "name": "s3_env",
                "class": "dataknobs_data.backends.s3.S3Database",
                "bucket": "${S3_BUCKET}",
                "prefix": "${S3_PREFIX}",
                "region": "${AWS_REGION}",
                "endpoint_url": "${LOCALSTACK_ENDPOINT}"
            }]
        })
    
        # Get instance
        db = config.get_instance("databases", "s3_env")
    
        # Verify environment variables were substituted
&gt;       assert db.bucket == "env-bucket"
E       AttributeError: 'S3Database' object has no attribute 'bucket'

packages/data/tests/test_s3_config_integration.py:74: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_config_with_defaults" time="0.001"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration object at 0x117e01960&gt;
mock_boto_client = &lt;MagicMock name='client' id='5567224592'&gt;
monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x14bd50df0&gt;

    @patch('boto3.client')
    def test_s3_config_with_defaults(self, mock_boto_client, monkeypatch):
        """Test S3 configuration with default values."""
        # Mock S3 client
        mock_s3 = MagicMock()
        mock_boto_client.return_value = mock_s3
        mock_s3.head_bucket.return_value = {}  # Bucket exists
    
        # Remove environment variable if set
        monkeypatch.delenv("S3_BUCKET", raising=False)
    
        # Create configuration with defaults
        config = Config()
        config.load({
            "databases": [{
                "name": "s3_defaults",
                "class": "dataknobs_data.backends.s3.S3Database",
                "bucket": "${S3_BUCKET:default-bucket}",
                "prefix": "${S3_PREFIX:default-prefix/}",
                "region": "${AWS_REGION:us-east-1}"
            }]
        })
    
        # Get instance
        db = config.get_instance("databases", "s3_defaults")
    
        # Verify defaults were used
&gt;       assert db.bucket == "default-bucket"
E       AttributeError: 'S3Database' object has no attribute 'bucket'

packages/data/tests/test_s3_config_integration.py:106: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_from_config_directly" time="0.001"><failure message="AttributeError: 'S3Database' object has no attribute 'bucket'">self = &lt;packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration object at 0x117e03250&gt;
mock_boto_client = &lt;MagicMock name='client' id='5567702128'&gt;

    @patch('boto3.client')
    def test_s3_from_config_directly(self, mock_boto_client):
        """Test creating S3Database directly with from_config."""
        # Mock S3 client
        mock_s3 = MagicMock()
        mock_boto_client.return_value = mock_s3
        mock_s3.head_bucket.return_value = {}  # Bucket exists
    
        config_dict = {
            "bucket": "direct-bucket",
            "prefix": "direct/",
            "region": "ap-southeast-1",
            "max_workers": 15,
            "max_retries": 5
        }
    
        db = S3Database.from_config(config_dict)
    
        assert isinstance(db, S3Database)
&gt;       assert db.bucket == "direct-bucket"
E       AttributeError: 'S3Database' object has no attribute 'bucket'

packages/data/tests/test_s3_config_integration.py:129: AttributeError</failure></testcase><testcase classname="packages.data.tests.test_s3_config_integration.TestS3ConfigIntegration" name="test_s3_missing_required_config" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamConfig" name="test_default_config" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamConfig" name="test_custom_config" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamConfig" name="test_invalid_batch_size" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamConfig" name="test_invalid_prefetch" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamConfig" name="test_invalid_timeout" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamResult" name="test_default_result" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamResult" name="test_success_rate" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamResult" name="test_add_error" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamResult" name="test_merge_results" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamResult" name="test_string_representation" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_batch_iterator" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_filter_stream" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_transform_stream" time="0.000" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_async_batch_iterator" time="0.001" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_async_filter_stream" time="0.001" /><testcase classname="packages.data.tests.test_streaming.TestStreamProcessor" name="test_async_transform_stream" time="0.001" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_read_all" time="0.003" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_read_with_query" time="0.003" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_write" time="0.003" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_write_with_errors" time="0.002" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_transform" time="0.004" /><testcase classname="packages.data.tests.test_streaming.TestSyncMemoryDatabaseStreaming" name="test_stream_transform_with_filter" time="0.003" /><testcase classname="packages.data.tests.test_streaming.TestAsyncMemoryDatabaseStreaming" name="test_stream_read_all" time="0.005" /><testcase classname="packages.data.tests.test_streaming.TestAsyncMemoryDatabaseStreaming" name="test_stream_read_with_query" time="0.005" /><testcase classname="packages.data.tests.test_streaming.TestAsyncMemoryDatabaseStreaming" name="test_stream_write" time="0.001" /><testcase classname="packages.data.tests.test_streaming.TestAsyncMemoryDatabaseStreaming" name="test_stream_transform" time="0.007" /><testcase classname="packages.data.tests.test_streaming.TestAsyncMemoryDatabaseStreaming" name="test_error_handling_with_callback" time="0.001" /><testcase classname="packages.data.tests.test_streaming.TestStreamingIntegration" name="test_sync_memory_to_memory_migration" time="0.003" /><testcase classname="packages.data.tests.test_streaming.TestStreamingIntegration" name="test_filtered_migration" time="0.004" /><testcase classname="packages.data.tests.test_streaming.TestStreamingIntegration" name="test_transformed_migration" time="0.004" /><testcase classname="packages.data.tests.test_streaming.TestStreamingIntegration" name="test_async_memory_to_memory_migration" time="0.006" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_basic_field_definition" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_with_default" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_type_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_field_with_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestFieldDefinition" name="test_custom_validator" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_creation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_strict_mode" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchema" name="test_schema_serialization" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_required_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_unique_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_min_max_value_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_length_constraints" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_pattern_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_enum_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_custom_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestConstraints" name="test_constraint_serialization" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_string_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_int_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_float_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_bool_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_list_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_dict_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_datetime_coercion" time="0.003" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_field_type_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestTypeCoercer" name="test_string_type_name_coercion" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchemaValidator" name="test_batch_validation" time="0.000" /><testcase classname="packages.data.tests.test_validation.TestSchemaValidator" name="test_validation_caching" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_required_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_unique_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_min_value_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_max_value_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_min_length_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_max_length_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_pattern_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_enum_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_custom_constraint" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestConstraintClasses" name="test_constraint_from_dict" time="0.000"><failure message="TypeError: Constraint.__init__() got an unexpected keyword argument 'type'">self = &lt;packages.data.tests.test_validation_extended.TestConstraintClasses object at 0x117e922f0&gt;

    def test_constraint_from_dict(self):
        """Test creating constraints from dictionary."""
        # Required constraint
        config = {"type": "RequiredConstraint"}
&gt;       constraint = Constraint.from_dict(config)

packages/data/tests/test_validation_extended.py:189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
packages/data/src/dataknobs_data/validation/constraints.py:69: in from_dict
    return constraint_class(**data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;dataknobs_data.validation.constraints.RequiredConstraint object at 0x14da58f40&gt;
allow_empty = False, kwargs = {'type': 'RequiredConstraint'}

    def __init__(self, allow_empty: bool = False, **kwargs):
        """Initialize required constraint.
    
        Args:
            allow_empty: Whether to allow empty strings/collections
        """
&gt;       super().__init__(**kwargs)
E       TypeError: Constraint.__init__() got an unexpected keyword argument 'type'

packages/data/src/dataknobs_data/validation/constraints.py:81: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_string" time="0.000"><failure message="AssertionError: assert None == ''">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e91c30&gt;

    def test_coerce_to_string(self):
        """Test coercion to string."""
        coercer = TypeCoercer()
    
        # Various types to string
        result = coercer.coerce(123, str)
        assert result == "123"
    
        result = coercer.coerce(True, str)
        assert result == "True"
    
        result = coercer.coerce(None, str)
&gt;       assert result == ""
E       AssertionError: assert None == ''

packages/data/tests/test_validation_extended.py:224: AssertionError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_integer" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e90040&gt;

    def test_coerce_to_integer(self):
        """Test coercion to integer."""
        coercer = TypeCoercer()
    
        # Valid conversions
        result = coercer.coerce("123", int)
        assert result == 123
    
        result = coercer.coerce(123.5, int)
        assert result == 123
    
        result = coercer.coerce(True, int)
        assert result == 1
    
        result = coercer.coerce(False, int)
        assert result == 0
    
        # Invalid conversions should raise exceptions
        with pytest.raises(CoercionError):
            coercer.coerce("abc", int)
    
&gt;       with pytest.raises(CoercionError):
E       Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;

packages/data/tests/test_validation_extended.py:253: Failed</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_float" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e927a0&gt;

    def test_coerce_to_float(self):
        """Test coercion to float."""
        coercer = TypeCoercer()
    
        # Valid conversions
        result = coercer.coerce("123.45", float)
        assert result == 123.45
    
        result = coercer.coerce(123, float)
        assert result == 123.0
    
        result = coercer.coerce(True, float)
        assert result == 1.0
    
        # Invalid conversions
        with pytest.raises(CoercionError):
            coercer.coerce("abc", float)
    
&gt;       with pytest.raises(CoercionError):
E       Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;

packages/data/tests/test_validation_extended.py:277: Failed</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_boolean" time="0.000"><failure message="assert None is False">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e92950&gt;

    def test_coerce_to_boolean(self):
        """Test coercion to boolean."""
        coercer = TypeCoercer()
    
        # String values
        result = coercer.coerce("true", bool)
        assert result is True
    
        result = coercer.coerce("false", bool)
        assert result is False
    
        result = coercer.coerce("yes", bool)
        assert result is True
    
        result = coercer.coerce("no", bool)
        assert result is False
    
        result = coercer.coerce("1", bool)
        assert result is True
    
        result = coercer.coerce("0", bool)
        assert result is False
    
        # Numeric values
        result = coercer.coerce(1, bool)
        assert result is True
    
        result = coercer.coerce(0, bool)
        assert result is False
    
        # Empty/None values
        result = coercer.coerce("", bool)
        assert result is False
    
        result = coercer.coerce(None, bool)
&gt;       assert result is False
E       assert None is False

packages/data/tests/test_validation_extended.py:315: AssertionError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_datetime" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e92b00&gt;

    def test_coerce_to_datetime(self):
        """Test coercion to datetime."""
        coercer = TypeCoercer()
    
        # Valid date strings
        result = coercer.coerce("2023-01-15", datetime)
        assert result.year == 2023
        assert result.month == 1
        assert result.day == 15
    
        result = coercer.coerce("2023-01-15 14:30:00", datetime)
        assert result.hour == 14
        assert result.minute == 30
    
        # ISO format
        result = coercer.coerce("2023-01-15T14:30:00", datetime)
        assert result is not None
    
        # Invalid conversions
        with pytest.raises(CoercionError):
            coercer.coerce("invalid-date", datetime)
    
&gt;       with pytest.raises(CoercionError):
E       Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;

packages/data/tests/test_validation_extended.py:339: Failed</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_list" time="0.000"><failure message="assert None == []">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e92cb0&gt;

    def test_coerce_to_list(self):
        """Test coercion to list."""
        coercer = TypeCoercer()
    
        # Comma-separated string
        result = coercer.coerce("1,2,3", list)
        assert result == ["1", "2", "3"]
    
        # Tuple
        result = coercer.coerce((1, 2, 3), list)
        assert result == [1, 2, 3]
    
        # Set
        result = coercer.coerce({1, 2, 3}, list)
        assert set(result) == {1, 2, 3}
    
        # Single value
        result = coercer.coerce("single", list)
        assert result == ["single"]
    
        # Already a list
        result = coercer.coerce([1, 2, 3], list)
        assert result == [1, 2, 3]
    
        # None
        result = coercer.coerce(None, list)
&gt;       assert result == []
E       assert None == []

packages/data/tests/test_validation_extended.py:371: AssertionError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_coerce_to_dict" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;">self = &lt;packages.data.tests.test_validation_extended.TestTypeCoercer object at 0x117e92e60&gt;

    def test_coerce_to_dict(self):
        """Test coercion to dict."""
        coercer = TypeCoercer()
    
        # Valid JSON string
        result = coercer.coerce('{"key": "value"}', dict)
        assert result == {"key": "value"}
    
        # Already a dict
        result = coercer.coerce({"key": "value"}, dict)
        assert result == {"key": "value"}
    
        # Invalid conversions
&gt;       with pytest.raises(CoercionError):
E       Failed: DID NOT RAISE &lt;class 'dataknobs_data.validation.type_coercion.CoercionError'&gt;

packages/data/tests/test_validation_extended.py:386: Failed</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestTypeCoercer" name="test_auto_coerce" time="0.000" /><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_field_definition_creation" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93250&gt;

    def test_field_definition_creation(self):
        """Test FieldDefinition creation."""
&gt;       field = FieldDefinition(
            name="email",
            field_type=FieldType.STRING,
            required=True,
            description="User email address",
            constraints=[
                PatternConstraint(pattern=r'^[\w\.-]+@[\w\.-]+\.\w+$')
            ]
        )
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:429: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_schema_creation" time="0.000"><failure message="TypeError: Schema.__init__() got an unexpected keyword argument 'description'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93400&gt;

    def test_schema_creation(self):
        """Test Schema creation and methods."""
&gt;       schema = Schema(
            name="UserSchema",
            version="1.0.0",
            description="User data schema"
        )
E       TypeError: Schema.__init__() got an unexpected keyword argument 'description'

packages/data/tests/test_validation_extended.py:446: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_schema_validator_basic" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e935b0&gt;

    def test_schema_validator_basic(self):
        """Test SchemaValidator with basic validation."""
        # Create schema
        schema = Schema(name="TestSchema")
&gt;       schema.add_field(FieldDefinition(
            name="required_field",
            field_type=FieldType.STRING,
            required=True
        ))
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:480: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_schema_validator_with_constraints" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93760&gt;

    def test_schema_validator_with_constraints(self):
        """Test SchemaValidator with various constraints."""
        # Create schema with constraints
        schema = Schema(name="ConstraintSchema")
    
&gt;       schema.add_field(FieldDefinition(
            name="email",
            field_type=FieldType.STRING,
            required=True,
            constraints=[
                PatternConstraint(pattern=r'^[\w\.-]+@[\w\.-]+\.\w+$')
            ]
        ))
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:514: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_schema_validator_with_coercion" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93910&gt;

    def test_schema_validator_with_coercion(self):
        """Test SchemaValidator with type coercion enabled."""
        schema = Schema(name="CoercionSchema")
    
&gt;       schema.add_field(FieldDefinition(
            name="count",
            field_type=FieldType.INTEGER,
            required=True
        ))
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:574: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_schema_to_dict_from_dict" time="0.000"><failure message="TypeError: Schema.__init__() got an unexpected keyword argument 'description'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93ac0&gt;

    def test_schema_to_dict_from_dict(self):
        """Test Schema serialization and deserialization."""
&gt;       schema = Schema(
            name="SerializableSchema",
            version="1.0.0",
            description="Test serialization"
        )
E       TypeError: Schema.__init__() got an unexpected keyword argument 'description'

packages/data/tests/test_validation_extended.py:610: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_validation_result" time="0.000"><failure message="TypeError: ValidationResult.add_error() missing 1 required positional argument: 'message'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93c70&gt;

    def test_validation_result(self):
        """Test ValidationResult class."""
        # Valid result
        result = ValidationResult(is_valid=True)
        assert result.is_valid
        assert len(result.errors) == 0
        assert len(result.warnings) == 0
    
        # Invalid result with errors
        result = ValidationResult(is_valid=False)
&gt;       result.add_error("field1", "Invalid value")
E       TypeError: ValidationResult.add_error() missing 1 required positional argument: 'message'

packages/data/tests/test_validation_extended.py:648: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_validation_error" time="0.000"><failure message="TypeError: ValidationError.__init__() got an unexpected keyword argument 'field'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93e20&gt;

    def test_validation_error(self):
        """Test ValidationError class."""
&gt;       error = ValidationError(
            field="email",
            message="Invalid email format",
            constraint_type="pattern"
        )
E       TypeError: ValidationError.__init__() got an unexpected keyword argument 'field'

packages/data/tests/test_validation_extended.py:665: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_custom_validation_with_schema" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117e93fd0&gt;

    def test_custom_validation_with_schema(self):
        """Test custom validation rules in schema."""
        def validate_even_number(value):
            """Custom validator for even numbers."""
            return isinstance(value, int) and value % 2 == 0
    
        schema = Schema(name="CustomValidationSchema")
&gt;       schema.add_field(FieldDefinition(
            name="even_number",
            field_type=FieldType.INTEGER,
            required=True,
            constraints=[
                CustomConstraint(
                    validator=validate_even_number,
                    error_message="Value must be an even number"
                )
            ]
        ))
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:682: TypeError</failure></testcase><testcase classname="packages.data.tests.test_validation_extended.TestSchemaAndValidation" name="test_field_definition_with_metadata" time="0.000"><failure message="TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'">self = &lt;packages.data.tests.test_validation_extended.TestSchemaAndValidation object at 0x117eb0100&gt;

    def test_field_definition_with_metadata(self):
        """Test FieldDefinition with metadata."""
&gt;       field = FieldDefinition(
            name="temperature",
            field_type=FieldType.FLOAT,
            required=True,
            description="Temperature reading",
            metadata={
                "unit": "celsius",
                "sensor_id": "TEMP001",
                "precision": 0.1
            }
        )
E       TypeError: FieldDefinition.__init__() got an unexpected keyword argument 'field_type'

packages/data/tests/test_validation_extended.py:709: TypeError</failure></testcase><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_package_deprecation_warning" time="0.001" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_utils_imports" time="0.001" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_structures_imports" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_xization_imports" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_legacy_package_version" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_backward_compatibility_json_utils" time="0.000" /><testcase classname="packages.legacy.tests.test_legacy_imports" name="test_backward_compatibility_file_utils" time="0.001" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_basics" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_construction" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_update" time="0.000" /><testcase classname="packages.structures.tests.test_conditional_dict" name="test_enforce_constraints_on_setdefault" time="0.000" /><testcase classname="packages.structures.tests.test_document" name="test_simple_text" time="0.000" /><testcase classname="packages.structures.tests.test_record_store" name="test_basics" time="0.004" /><testcase classname="packages.structures.tests.test_record_store" name="test_no_backing_file" time="0.001" /><testcase classname="packages.structures.tests.test_tree" name="test_basics" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_find_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_collect_all_terminal_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_collect_some_terminal_nodes" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_path_and_ancestor" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_deepest_common_ancestor" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_prune" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_insert" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_get_deepest_left_and_right" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_edges" time="0.000" /><testcase classname="packages.structures.tests.test_tree" name="test_build_tree1" time="0.002" /><testcase classname="packages.structures.tests.test_tree" name="test_build_tree2" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_basic_noop" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_basic_withop" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_single_multifield" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_field_query_dict_multifield" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_build_phrase_query_dict" time="0.000" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_batchfile_functions" time="0.001" /><testcase classname="packages.utils.tests.test_elasticsearch_utils" name="test_elasticsearch_index" time="0.002" /><testcase classname="packages.utils.tests.test_file_utils" name="test_basics" time="0.002" /><testcase classname="packages.utils.tests.test_file_utils" name="test_is_gzip_file" time="0.001" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_complete_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_multiple_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_nested_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_unclosed_brace" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_unclosed_string" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_malformed_json_trailing_comma" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_no_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_multiple_malformed_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_severely_malformed_json" time="0.000" /><testcase classname="packages.utils.tests.test_json_extractor.TestJSONExtractor" name="test_json_with_escaped_quotes" time="0.000" /><testcase classname="packages.utils.tests.test_json_utils" name="test_get_value" time="0.000" /><testcase classname="packages.utils.tests.test_json_utils" name="test_get_value2" time="0.000" /><testcase classname="packages.utils.tests.test_json_utils" name="test_count_uniques" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_count_limited_uniques" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_invert_values" time="0.002" /><testcase classname="packages.utils.tests.test_json_utils" name="test_squash_and_explode_data1" time="0.001" /><testcase classname="packages.utils.tests.test_json_utils" name="test_squash_and_explode_data2" time="0.001" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_get_value_by_key" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_message" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_message_build_instance" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_tree_construction" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_prompt_tree_serialization_roundtrip" time="0.000" /><testcase classname="packages.utils.tests.test_llm_utils" name="test_get_duration_and_apply" time="0.000" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_dicts2df" time="0.002" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_sort_by_str_length" time="0.001" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_explode_empties" time="0.002" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_explode" time="0.001" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_mark_and_unmark" time="0.009" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_find_subsets" time="0.017" /><testcase classname="packages.utils.tests.test_pandas_utils" name="test_group_manager_subgroups" time="0.009" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_get_current_ip" time="0.000" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_server_response_repr1" time="0.000" /><testcase classname="packages.utils.tests.test_requests_utils" name="test_server_response_repr2" time="0.000" /><testcase classname="packages.utils.tests.test_resource_utils" name="test_get_nltk_wordnet" time="0.001" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_empty" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_stats_accumulator_basics1" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_stats_accumulator_basics2" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_combine" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_copy_constructor" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_initialize_from_dict1" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_floating_point" time="0.000" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_simple1" time="0.152" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_basics_with_processing" time="0.192" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_basics_with_access_only" time="0.244" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_monitor_manager_basics" time="0.205" /><testcase classname="packages.utils.tests.test_stats_utils" name="test_key_manager" time="0.001" /><testcase classname="packages.utils.tests.test_xml_utils" name="test_xml_leaf_stream" time="0.001" /><testcase classname="packages.utils.tests.test_xml_utils" name="test_xml_element_grabber" time="0.001" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_no_groups" time="0.003" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_no_name_groups" time="0.002" /><testcase classname="packages.xization.tests.test_authorities" name="test_regex_authority_named_groups" time="0.004" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_empty_tokenization" time="0.004" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_dual_tokenization" time="0.008" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_simple_tokenization" time="0.006" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_emoji_tokenization_with_camelcase" time="1.152" /><testcase classname="packages.xization.tests.test_masking_tokenizer" name="test_emoji_tokenization_without_camelcase" time="1.138" /><testcase classname="packages.xization.tests.test_normalize" name="test_expand_camelcase_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_non_embedded_symbols_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_embedded_symbols_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_get_hyphen_slash_expansions_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_drop_parentheticals_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_expand_ampersand_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_get_all_string_variations" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_int_to_en" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_replace_smart_quotes_fn" time="0.000" /><testcase classname="packages.xization.tests.test_normalize" name="test_basic_normalization_fn" time="0.001" /></testsuite></testsuites>